{"version":3,"sources":["components/About.js","components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["About","myStyle","setMyStyle","useState","backgroundColor","color","btntext","setBtnText","React","createElement","className","style","id","type","data-bs-toggle","data-bs-target","aria-expanded","aria-controls","data-bs-parent","onClick","toggleStyle","border","Navbar","props","concat","mode","Link","to","title","aria-label","aria-current","role","placeholder","toggleMode","htmlFor","TextForm","text","setText","Fragment","heading","value","onChange","event","console","log","target","showAlert","background","rows","handleUpClick","newText","toUpperCase","handleLoClick","toLowerCase","handleClearClick","document","getElementById","select","navigator","clipboard","writeText","split","join","length","prototype","PropTypes","string","isRequired","Alert","alert","word","lower","charAt","slice","capitalize","msg","data-bs-dismiss","App","setMode","setAlert","message","Router","body","setInterval","Routes","Route","path","element","reportWebVitals","onPerfEntry","Function","then","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode"],"mappings":"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","file":"static/js/main.d348eb89.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\n\r\nexport default function About() {\r\n\r\n    const [myStyle, setMyStyle] = useState( {\r\n        backgroundColor: 'white',\r\n        color: 'black',\r\n    })\r\n\r\n    const [btntext, setBtnText] = useState(\"Enable Dark mode\")\r\n\r\n    const toggleStyle= () => {\r\n        if(myStyle.color === 'black') {\r\n            setMyStyle({\r\n                backgroundColor: 'black',\r\n                color: 'white',\r\n                border:'1px solid white'\r\n            })\r\n            setBtnText(\"Enable Light mode\")\r\n        }\r\n        else{\r\n            setMyStyle({\r\n                backgroundColor: 'white',\r\n                color: 'black',\r\n            })\r\n            setBtnText(\"Enable Dark mode\")\r\n        }\r\n    }\r\n\r\n\r\n  return (\r\n    <div className=\"container\" style={myStyle}>\r\n        <h2>About Us</h2>\r\n      <div className=\"accordion\" id=\"accordionExample\" style={myStyle}>\r\n  <div className=\"accordion-item\" >\r\n    <h2 className=\"accordion-header\">\r\n      <button className=\"accordion-button\" type=\"button\" style={myStyle} data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\r\n        Accordion Item #1\r\n      </button>\r\n    </h2>\r\n    <div id=\"collapseOne\" className=\"accordion-collapse collapse show\"  data-bs-parent=\"#accordionExample\">\r\n      <div className=\"accordion-body\">\r\n        <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div className=\"accordion-item\" >\r\n    <h2 className=\"accordion-header\">\r\n      <button className=\"accordion-button collapsed\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\r\n        Accordion Item #2\r\n      </button>\r\n    </h2>\r\n    <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" data-bs-parent=\"#accordionExample\">\r\n      <div className=\"accordion-body\">\r\n        <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div className=\"accordion-item\" >\r\n    <h2 className=\"accordion-header\">\r\n      <button className=\"accordion-button collapsed\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\r\n        Accordion Item #3\r\n      </button>\r\n    </h2>\r\n    <div id=\"collapseThree\" className=\"accordion-collapse collapse\" data-bs-parent=\"#accordionExample\">\r\n      <div className=\"accordion-body\">\r\n        <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n    <div className=\"container my-3\">\r\n<button onClick={toggleStyle} type=\"button\" className=\"btn btn-secondary\">{btntext}</button>\r\n    </div>\r\n    </div> \r\n     )\r\n}\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n      <div className=\"container-fluid\">\r\n        <Link className=\"navbar-brand\" to=\"/\">\r\n          {props.title}\r\n        </Link>\r\n        <button\r\n          className=\"navbar-toggler\"\r\n          type=\"button\"\r\n          data-bs-toggle=\"collapse\"\r\n          data-bs-target=\"#navbarSupportedContent\"\r\n          aria-controls=\"navbarSupportedContent\"\r\n          aria-expanded=\"false\"\r\n          aria-label=\"Toggle navigation\"\r\n        >\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\"> Home</Link>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <Link className=\"nav-link\" to=\"/about\" >{props.About}\r\n              </Link>\r\n            </li>\r\n          </ul>\r\n          <form className=\"d-flex\" role=\"search\">\r\n            <input\r\n              className=\"form-control me-2\"\r\n              type=\"search\"\r\n              placeholder=\"Search\"\r\n              aria-label=\"Search\"\r\n            />\r\n            <button className=\"btn btn-outline-success \" type=\"submit\">\r\n              Search\r\n            </button>\r\n            </form>\r\n            <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n  <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n  <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable dark Mode</label>\r\n</div>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n\r\nNavbar.prototype = { title: PropTypes.string.isRequired, About: PropTypes.string.isRequired };\r\n","import React, { useState } from \"react\";\r\n\r\nconsole.log();\r\nexport default function TextForm(props) {\r\n  const handleUpClick = () => {\r\n    console.log(\"UpperCase was Clicked\" + text);\r\n    let newText = text.toUpperCase();\r\n    setText(newText);\r\n    props.showAlert(\"Converted to Upper Case\",\"success\");\r\n  };\r\n\r\n  const handleLoClick = () => {\r\n    console.log(\"LowerCase was Clicked\" + text);\r\n    let newText = text.toLowerCase();\r\n    setText(newText);\r\n    props.showAlert(\"Converted to Lower Case\",\"success\");\r\n  };\r\n\r\n  const handleClearClick = () => {\r\n    console.log(\"Clear was Clicked\" + text);\r\n    let newText = \"\";\r\n    setText(newText);\r\n  };\r\n\r\n  const handleOnChange = (event) => {\r\n    console.log(\"On Change\");\r\n    setText(event.target.value);\r\n    props.showAlert(\"Text is changed\",\"success\");\r\n  };\r\n\r\n  const handleCopy = (event) => {\r\n    console.log(\"Copy was Clicked\");\r\n    var text = document.getElementById(\"MyBox\");\r\n    text.select();\r\n    navigator.clipboard.writeText(text.value);\r\n  };\r\n\r\n  const handleExtraSpace = (event) => {\r\n    console.log(\"Extra Space was Clicked\");\r\n    let newText = text.split(/[ ]+/);\r\n    setText(newText.join(\" \"));\r\n  };\r\n\r\n  const [text, setText] = useState(\"Enter text here\");\r\n  return (\r\n    <>\r\n      <div\r\n        className=\"container\"\r\n        style={{ color: props.mode === \"dark\" ? \"white\" : \"black\" }}\r\n      >\r\n        <h1>{props.heading}</h1>\r\n        <div className=\"mb-3\">\r\n          <textarea\r\n            className=\"form-control\"\r\n            value={text}\r\n            onChange={handleOnChange}\r\n            style={{\r\n              background: props.mode === \"dark\" ? \"grey\" : \"white\",\r\n              color: props.mode === \"dark\" ? \"white\" : \"black\",\r\n            }}\r\n            id=\"MyBox\"\r\n            rows=\"8\"\r\n          ></textarea>\r\n        </div>\r\n        <button className=\"btn btn-primary mx-2\" onClick={handleUpClick}>\r\n          Convert to UpperCase\r\n        </button>\r\n        <button className=\"btn btn-primary mx-2\" onClick={handleLoClick}>\r\n          Convert to LowerCase\r\n        </button>\r\n        <button className=\"btn btn-primary mx-2\" onClick={handleClearClick}>\r\n          Clear text\r\n        </button>\r\n        <button className=\"btn btn-primary mx-2\" onClick={handleCopy}>\r\n          Copy text\r\n        </button>\r\n        <button className=\"btn btn-primary mx-2\" onClick={handleExtraSpace}>\r\n          Space Handle\r\n        </button>\r\n      </div>\r\n      <div\r\n        className=\"container my-3\"\r\n        style={{ color: props.mode === \"dark\" ? \"white\" : \"black\" }}\r\n      >\r\n        <h1>Your text summery</h1>\r\n        <p>\r\n          {text.split(\" \").length} Words and {text.length} Characters\r\n        </p>\r\n        <p>{0.008 * text.split(\" \").length} Minutes read</p>\r\n        <h2>Preview</h2>\r\n        <p>{text.length > 0 ? text : \"Enter something preview here\"}</p>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    const capitalize = (word)=>{\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toLowerCase() + lower.slice(1);\r\n    }\r\n  return (\r\n    <div>\r\n      {props.alert && ( <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n    <strong>{capitalize(props.alert.type)}</strong>:{props.alert.msg}\r\n  <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button>\r\n</div>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Alert\r\n","import { useState } from 'react';\nimport React from 'react';\nimport { BrowserRouter as Router, Routes, Route,} from \"react-router-dom\";\nimport './App.css';\nimport About from './components/About';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport Alert from './components/Alert';\n\nfunction App() {\n  const [mode, setMode] = useState('light');\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message,type)=>{\n    setAlert({\n      msg:message,\n      type:type\n    })\n  }\n\n const toggleMode =() => {\n    if(mode === 'light'){\n      setMode('dark')\n      document.body.style.backgroundColor ='#090e58';\n      showAlert(\"dark mode is enabled\",\"success\");\n      setInterval(() => {\n        document.title = 'ROTER - Dark Mode';\n      }, 2000);\n      setInterval(() => {\n        document.title = 'ROTER - Loading Mode';\n      }, 1500);\n    }\n    else{\n      setMode('light')\n      document.body.style.backgroundColor ='white'\n      showAlert(\"light mode is enabled\",\"success\");\n      setInterval(() => {\n        document.title = 'ROTER - Light Mode';\n      }, 2000);\n      setInterval(() => {\n        document.title = 'ROTER - Loading Mode';\n      }, 1500);\n    }\n  }\n\n  return (\n    <>\n    <Router>\n        <Navbar title=\"ROTER\" About=\"About Us\" mode={mode} toggleMode={toggleMode} />\n        <Alert alert={alert} />\n        <div className=\"container my-3\">\n          <Routes>\n            <Route path=\"/about\" element={<About />} />\n            <Route path=\"/\" element={<TextForm showAlert={showAlert} heading=\"Enter The text to Analyze\" mode={mode} />} />\n          </Routes>\n        </div>\n      </Router>\n        </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}